/*
Example Code License

Permission to use, copy, modify, and distribute this software for any 
purpose without fee is hereby granted, provided that this entire notice 
is included in all copies of any software which is or includes a copy 
or modification of this software and in all copies of the supporting 
documentation for such software.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Copyright (C)2006 Zink Digital Ltd
 */

package com.zink.fly.example;


import com.zink.fly.kit.FlyFactory;
import com.zink.fly.FlyPrime;
import com.zink.fly.kit.FlyFinder;

/**
 *
 * @author nigel
 */
public class WriteRead {
    
     
    public static void main(String[] args) {

        // only local spcae 
        FlyPrime space = FlyFactory.makeFly();
        
        // any Fly space on local net
        //        FlyFinder flyFinder = new FlyFinder();
        //        FlyPrime space = flyFinder.find();
        //        if (null == space) {
        //            System.err.println("Failed to find a Fly Server running on the local network");
        //            System.exit(1);
        //        }
        
        final int payloadSize = 100;

        // set up an object to write to the space
        FlyEntry object = new FlyEntry();
        object.name = "Fly 1";
        object.reference = new Integer(17);
        object.setPayloadOfSize(payloadSize);


        // set up a tempate to match the above object 
        FlyEntry template = new FlyEntry();
        template.name = "Fly 1";
        template.reference = null;    // match any value in this template
        template.payload = null;      // ditto

        // now do a a number of iterations of write and reads
        int iterations = 10000;
        if (args.length > 0) {
            iterations = Integer.parseInt(args[0]);
        }
                

        System.out.println("Processing " + iterations + " writes and reads");
        long start = System.currentTimeMillis();
        for (int i = 0; i < iterations; i++) {
            space.write(object, 1000);
            space.read(template, 0L);
        }
        long end = System.currentTimeMillis();
        float timeInSeconds = (float) (end - start) / 1000.0f;
        System.out.println("Which took " + timeInSeconds + " seconds\n");
    }
  
}
