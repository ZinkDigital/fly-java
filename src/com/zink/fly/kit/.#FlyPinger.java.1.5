/*
 * 
 */

package com.zink.fly.kit;


import com.zink.fly.stub.StringCodec;
import java.io.DataInputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Date;
import java.util.concurrent.TimeoutException;


/**
 *
 * @author nigel
 */
public class FlyPinger {
   
    private static final byte [] pingOp = 
            new byte[] { (byte)0xfa,(byte)0xb1,(byte)0x0,(byte)0x0 };
    
    private StringCodec stringCodec = new StringCodec();
  
    private int timeout = 5; // default 5 ms timeout 
    
    
    public FlyPinger()  { }
    
    
    public FlyPinger(int timeout) {
        this.timeout = timeout;
    }
    
   
    /**
     * Send a ping message to a Fly Space running on the given InetAddress and 
     * port.
     * @param addr
     * @return String [] of tags or null array for failed ping.
     */   
    public String [] ping(InetAddress addr, int port) {
        String [] tags = null;
        try {
            
            Socket sock = new Socket(addr, port);
            sock.setKeepAlive(true);
            DataInputStream dis = new DataInputStream(sock.getInputStream()); 
            sock.getOutputStream().write(pingOp);
            
            // wait for the reply for the specified time.
            long start = System.currentTimeMillis();
            while (dis.available() == 0 && (System.currentTimeMillis() - start) < timeout) {
                Thread.sleep(1);
            }
            
            if (dis.available() == 0 ) {
                throw new TimeoutException("No reply from fly server");
            }
            
            
            long tagCount = dis.readLong();
            tags = new String[(int)tagCount];
            for (int i = 0; i < tagCount; i++) {
                tags[i] = stringCodec.readString(dis);
            }
            sock.setKeepAlive(Boolean.FALSE);
            sock.shutdownInput();
            sock.shutdownOutput();
            sock.close();
        } catch (Exception exp ) {
            System.err.println(new Date() + ":FlyPinger:" + exp.getMessage());
        }
        return tags;
    }
    
    
    /**
     * Send a ping message to a Fly Space running on the given Address and 
     * port.
     * @param host
     * @return String [] of tags or null array for failed ping.
     */   
    public String [] ping(String host, int port) throws UnknownHostException {
        InetAddress addr = InetAddress.getByName(host);
        return ping(addr, port);
    }

    public int getTimeout() {
        return timeout;
    }
  
    
}
